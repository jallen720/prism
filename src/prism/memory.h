#pragma once

#include <cstdlib>
#include "defines.h"

namespace prism
{

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Data Structures
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<typename T>
struct Container
{
    T * data;
    size_t count;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Interface
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<typename T>
T *
memAlloc(size_t count = 1)
{
    PRISM_ASSERT(count > 0);
    return (T *)malloc(sizeof(T) * count);
}

template<typename T>
Container<T>
memCreateContainer(size_t count)
{
    Container<T> container = {};
    container.data = memAlloc<T>(count);
    container.count = count;
    return container;
}

template<typename T>
void
memFreeContainer(const Container<T> * container)
{
    free(container->data);
}

} // namespace prism
